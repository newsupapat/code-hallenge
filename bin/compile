#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
# set -x

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
LP_DIR=`cd $(dirname $0); cd ..; pwd`

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"

export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH|JAVA_OPTS)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}
export_env_dir "$ENV_DIR" "^APT_"
APT_ENABLE=${APT_ENABLE:-yes}
APT_CACHING=${APT_CACHING:-no}
APT_FLAG_DIR="$CACHE_DIR/apt/flags"

if ! [ -f $BUILD_DIR/Aptfile ]; then
  topic "Aptfile is not found"
  exit 0
fi

if ! [ $APT_ENABLE = yes -o $APT_ENABLE = true -o $APT_ENABLE = 1 ]; then
  topic "Apt is disabled"
  exit 0
fi

if [ $APT_CACHING = yes ]; then
  if [ -f $APT_FLAG_DIR/Aptfile ] && cmp -s $BUILD_DIR/Aptfile $APT_FLAG_DIR/Aptfile ; then
    APT_CACHING=yes
  else
    APT_CACHING=no
    topic "Aptfile was modified"
  fi
fi

if [ $APT_CACHING = yes ]; then
  topic "Caching enabled"
else
  rm -rf $CACHE_DIR/apt
fi

mkdir -p $APT_FLAG_DIR
mkdir -p $APT_CACHE_DIR/archives/partial
mkdir -p $APT_STATE_DIR/lists/partial

APT_SOURCE_LIST="$APT_FLAG_DIR/sources.list"
cat /etc/apt/sources.list > $APT_SOURCE_LIST
IFS=',' read -ra SOURCE_LIST <<< "$APT_SOURCES"
for SOURCE in "${SOURCE_LIST[@]}"; do
    echo "$SOURCE" >> $APT_SOURCE_LIST
done
APT_OPTIONS="$APT_OPTIONS -o dir::etc::sourcelist=$APT_SOURCE_LIST"

rm -f $APT_FLAG_DIR/Aptfile
cp -p $BUILD_DIR/Aptfile $APT_FLAG_DIR/Aptfile

if [ ! -f $APT_FLAG_DIR/cache_updated ]; then
  [ $APT_CACHING = yes ] && touch $APT_FLAG_DIR/cache_updated
  topic "Updating apt caches"
  apt-get $APT_OPTIONS update | indent
fi

for PACKAGE in $(cat $BUILD_DIR/Aptfile); do
  [[ "$PACKAGE" == \#* ]] && continue
  if [ $APT_CACHING = yes ] || [ $APT_CACHING = true ] || [ $APT_CACHING = 1 ]; then
    [ -f $APT_FLAG_DIR/pkg.$PACKAGE ] && continue || touch $APT_FLAG_DIR/pkg.$PACKAGE
  fi

  if [[ $PACKAGE == *deb ]]; then
    PACKAGE_NAME=$(basename $PACKAGE .deb)
    PACKAGE_FILE=$APT_CACHE_DIR/archives/$PACKAGE_NAME.deb

    topic "Fetching $PACKAGE"
    curl -s -L -z $PACKAGE_FILE -o $PACKAGE_FILE $PACKAGE 2>&1 | indent
  else
    topic "Fetching .debs for $PACKAGE"
    apt-get $APT_OPTIONS -y --force-yes -d install --reinstall $PACKAGE | indent
  fi
done

mkdir -p $BUILD_DIR/.apt

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  topic "Installing $(basename $DEB)"
  dpkg -x $DEB $BUILD_DIR/.apt/
done

topic "Writing profile script"
mkdir -p $BUILD_DIR/.profile.d
cat <<EOF >$BUILD_DIR/.profile.d/000_apt.sh
export PATH="\$HOME/.apt/usr/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.apt/usr/include:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
EOF

export PATH="$BUILD_DIR/.apt/usr/bin:$PATH"
export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LIBRARY_PATH"
export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include:$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"

#give environment to later buildpacks
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH)='  > "$LP_DIR/export"
